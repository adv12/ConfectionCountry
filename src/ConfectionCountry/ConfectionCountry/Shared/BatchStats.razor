<!--
Copyright (c) 2019 Andrew Vardeman.  Published under the MIT license.
See license.txt in the ConfectionCountry distribution or repository for the
full text of the license.
-->
<div class="batchStats">
    @if (Batch.CurrentGame != null)
    {
    <table class="topMargin">
        <tr>
            <th>Player</th>
            <th>Games Won</th>
            <th>%</th>
        </tr>
        @{
            Player[] players = Batch.TemplateGame.Players.ToArray();
            int[] winCounts = new int[players.Length];
            for (int i = 0; i < players.Length; i++)
            {
                winCounts[i] = Batch.GetWinCount(players[i]);
            }
            Array.Sort(winCounts, players);
        }
        @for (int i = players.Length - 1; i >= 0; i--)
        {
            Player player = players[i];
            int winCount = winCounts[i];
            int order = Batch.TemplateGame.Players.IndexOf(player) + 1;
            <tr>
                <td><div class="playerLabel @(Util.GetBootstrapClasses(player.Color))"><strong>@(player.Name) (P@(order))</strong></div></td>
                <td>@(winCount)</td>
                <td>@((((double)winCount) / Batch.NumberOfGames * 100).ToString("F2"))</td>
            </tr>
        }
    </table>
    }
</div>

@code {
    [Parameter] public Batch Batch { get; set; }
}
