<!--
Copyright (c) 2019 Andrew Vardeman.  Published under the MIT license.
See license.txt in the ConfectionCountry distribution or repository for the
full text of the license.
-->
@{ 
    Player nextPlayer = Game.NextNonSkippedPlayer;
    SpaceType[] spaces = Game.Spaces;
}

    <div class="gameUI">
        <div class="board">
            @for (int i = 11; i >= 0; i--)
            {
                bool odd = ((i + 1) % 2 > 0);
                for (int j = 0; j < 12; j++)
                {
                    int index = 12 * i + (odd ? j : 12 - 1 - j);
            <div id="space@(index)" style="order: @(143 - index));"
                 class="space @(index <= 133 ? Util.GetColorClass(spaces[index]) : "")">@(index <= 133 ? index.ToString() : "")</div>
                }
            }
        </div>
        <div class="cardPiles">
            <strong class="nextPlayer @(Util.GetBootstrapClasses(nextPlayer.Color))">@(nextPlayer.Name)'s Turn</strong>
            <button id="deck" class="cardPile btn btn-outline-primary" @onclick="@NextAsync">Draw Card</button>
            <button id="discardPile" class="cardPile btn btn-outline-primary"></button>
        </div>
    </div>

@code {

    [Parameter] Game Game { get; set; }

    public async void NextAsync()
    {
        Game.Next();
        Turn turn = Game.CurrentTurn;
        await AnimateTurnAsync(turn);
    }

    public async Task AnimateTurnAsync(Turn turn)
    {
        
        StateHasChanged();
    }

}
