<!--
Copyright (c) 2019 Andrew Vardeman.  Published under the MIT license.
See license.txt in the ConfectionCountry distribution or repository for the
full text of the license.
-->
<div class="topRowContainer">
    <form class="topRow formGroup">
        <div class="topRowItem singleLine">
            <input type="text" size="6" value="1000" @oninput="@((e) => HandleInput(e))"
                   class="form-control" required="required" /> Games
        </div>
        <div class="topRowItem">
            @if (Batch.CurrentGame == null || Paused)
            {
                <button class="btn btn-primary" @onclick="@RunBatchAsync">Run Batch</button>
            }
            else if (Batch.CompletedGames.Count == Batch.NumberOfGames)
            {
                <button class="btn btn-primary" @onclick="@Pause">Pause</button>
            }
        </div>
    </form>
</div>
@if (Batch.CurrentGame != null)
{
    <GameUI Game="@Batch.CurrentGame" ReadOnly="@true" />
}

@code {

[Parameter] public Batch Batch { get; set; }

[Parameter] public EventCallback OnReset { get; set; }

public bool Paused { get; set; } = true;

public void Pause()
{
    Paused = true;
}

public void HandleInput(UIChangeEventArgs e)
{
    int.TryParse((string)e.Value, out int number);
    Batch.NumberOfGames = number;
    StateHasChanged();
}

public async void RunBatchAsync()
{
    Console.WriteLine("in RunBatchAsync");
    return;
    Paused = false;
    while (!Paused && Batch.CompletedGames.Count < Batch.NumberOfGames)
    {
        Console.WriteLine("Foo");
        Batch.Next();
        StateHasChanged();
        //await Task.Delay(10);
    }
}

}
