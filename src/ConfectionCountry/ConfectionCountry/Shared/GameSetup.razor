<!--
Copyright (c) 2019 Andrew Vardeman.  Published under the MIT license.
See license.txt in the ConfectionCountry distribution or repository for the
full text of the license.
-->
    <div class="defaultWidthContainer">
        <div class="defaultWidth">
            <h3>Game Setup</h3>
            Enter the player names and colors.  The youngest player should be entered first.
            <form class="setupGrid formGroup @(Game.Players.Count > 2 ? "canDelete" : "")">
                @foreach (Player p in Game.Players)
                {
                    Player player = p;
                    <input type="text" size="12" value="@player.Name" @oninput="(e) => HandleInput(e, player)"
                           class="form-control" required="required" pattern="\w[\w\s]*" />
                    <div class="dropdown">
                        <button class="btn @(Util.GetBootstrapButtonClass(player.Color)) dropdown-toggle" type="button"
                                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @(Enum.GetName(typeof(PlayerColor), player.Color) ?? "Color")
                        </button>
                        <div class="dropdown-menu">
                            @foreach (PlayerColor c in AllColors)
                            {
                                PlayerColor color = c;
                                <a class="dropdown-item @(Util.GetBootstrapClasses(color))"
                                   @onclick="@(e => SetColor(player, c))" href="#">@(Enum.GetName(typeof(PlayerColor), color))</a>
                            }
                        </div>
                    </div>
                    <button class="btn btn-outline-primary removePlayerButton" @onclick="() => RemovePlayer(player)">X</button>
                }
            </form>
            <div class="buttonStack">
                <button class="btn btn-outline-primary" @onclick="AddPlayer">Add Player</button>
                <button class="btn btn-primary" @onclick="StartGame" disabled="@(!Game.SetupValid)">Start Game</button>
                <button class="btn btn-primary" @onclick="StartBatch" disabled="@(!Game.SetupValid)">Start Batch</button>
            </div>
        </div>
    </div>

@code {
                [Parameter] public Game Game { get; set; }

                [Parameter] public EventCallback OnStartGame { get; set; }

                [Parameter] public EventCallback OnStartBatch { get; set; }

                public PlayerColor[] AllColors => (PlayerColor[])Enum.GetValues(typeof(PlayerColor));

                public bool AutoPlay { get; set; }

                public void HandleInput(ChangeEventArgs e, Player player)
                {
                    player.Name = (string)e.Value;
                    StateHasChanged();
                }

                public void RemovePlayer(Player player)
                {
                    Game.Players.Remove(player);
                    StateHasChanged();
                }

                public void AddPlayer()
                {
                    PlayerColor color = AllColors.First(c => !Game.Players.Any(p => p.Color == c));
                    Game.Players.Add(new Player("", color));
                    StateHasChanged();
                }

                public void SetColor(Player player, PlayerColor color)
                {
                    Player existingPlayer = Game.Players.FirstOrDefault(p => p.Color == color);
                    if (existingPlayer != null)
                    {
                        existingPlayer.Color = 0;
                    }
                    player.Color = color;
                }

                public void StartGame()
                {
                    OnStartGame.InvokeAsync(AutoPlay);
                }

                public void StartBatch()
                {
                    OnStartBatch.InvokeAsync(null);
                }
        }
