<!--
Copyright (c) 2019 Andrew Vardeman.  Published under the MIT license.
See license.txt in the ConfectionCountry distribution or repository for the
full text of the license.
-->

<h3>Game Setup</h3>
Enter the player names and colors.  The youngest player should be entered first.
<form class="setupGrid formGroup @(Game.Players.Count < 3 ? "canDelete" : "")">
    @{ int i = 1; }
    @foreach (Player p in Game.Players)
    {
        Player player = p;
        <input type="text" @oninput="@((e) => HandleInput(e, player))"
               class="form-control" required="required" pattern="\w[\w\s]*"/>
        <div class="dropdown">
            <button class="btn @(Util.GetBootstrapButtonClass(player.Color)) dropdown-toggle" type="button"
                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @(Enum.GetName(typeof(PlayerColor), player.Color) ?? "Color")
            </button>
            <div class="dropdown-menu">
                @foreach (PlayerColor c in AllColors)
    {
        PlayerColor color = c;
                    <a class="dropdown-item @(Util.GetBootstrapClasses(color))"
                       @onclick="@(() => SetColor(player, c))" href="#">@(Enum.GetName(typeof(PlayerColor), color))</a>
    }
            </div>
        </div>
        <button class="btn btn-outline-primary removePlayerButton" @onclick="@(() => RemovePlayer(player))">X</button>
    }
</form>
<div class="buttonStack">
    <button class="btn btn-outline-primary" @onclick="@AddPlayer">Add Player</button>
    <button class="btn btn-primary" @onclick="@StartGame" disabled="@(!Game.SetupValid)">Start Game!</button>
</div>

@code {
            [Parameter] Game Game { get; set; }

            [Parameter] EventCallback OnStartGame { get; set; }

            public PlayerColor[] AllColors => (PlayerColor[])Enum.GetValues(typeof(PlayerColor));


            public void HandleInput(UIChangeEventArgs e, Player player)
            {
                player.Name = (string)e.Value;
                StateHasChanged();
            }

            public void RemovePlayer(Player player)
            {
                Game.Players.Remove(player);
                StateHasChanged();
            }

            public void AddPlayer()
            {
                Game.Players.Add(new Player());
                StateHasChanged();
            }

            public void SetColor(Player player, PlayerColor color)
            {
                Player existingPlayer = Game.Players.FirstOrDefault(p => p.Color == color);
                if (existingPlayer != null)
                {
                    existingPlayer.Color = 0;
                }
                player.Color = color;
            }

            public void StartGame()
            {
                OnStartGame.InvokeAsync(null);
            }
        }
